{
	"info": {
		"_postman_id": "e0613a79-80b5-4510-9fd6-b8af2648df1e",
		"name": "ConsultaIBGE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7416262"
	},
	"item": [
		{
			"name": "Estados",
			"item": [
				{
					"name": "ListaTodosEstados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('sigla');\r",
									"        pm.expect(item).to.have.property('nome');\r",
									"        pm.expect(item).to.have.property('regiao');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
									"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"// Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    const idSet = new Set();\r",
									"    const siglaSet = new Set();\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(idSet.has(item.id)).to.be.false;\r",
									"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
									"        \r",
									"        idSet.add(item.id);\r",
									"        siglaSet.add(item.sigla);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Regiao object has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.regiao).to.be.an('object');\r",
									"        pm.expect(item.regiao).to.have.property('id');\r",
									"        pm.expect(item.regiao).to.have.property('sigla');\r",
									"        pm.expect(item.regiao).to.have.property('nome');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/estados",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"estados"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListaEstadosSigla",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/estados/35",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"estados",
								"35"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListaTodasRegiÃµes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, sigla, and nome\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(region) {\r",
									"        pm.expect(region).to.have.property('id');\r",
									"        pm.expect(region).to.have.property('sigla');\r",
									"        pm.expect(region).to.have.property('nome');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Sigla and nome are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  \r",
									"  responseData.forEach(function (item) {\r",
									"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each object in the response has only the specified properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(region) {\r",
									"        pm.expect(region).to.be.an('object');\r",
									"        pm.expect(Object.keys(region)).to.have.members(['id', 'sigla', 'nome']);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is unique for each object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    const idArray = [];\r",
									"    responseData.forEach(function(obj) {\r",
									"        pm.expect(obj.id).to.exist;\r",
									"        pm.expect(idArray).to.not.include(obj.id);\r",
									"        idArray.push(obj.id);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/regioes/",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"regioes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ListaEstadoRegiao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('sigla');\r",
									"        pm.expect(item).to.have.property('nome');\r",
									"        pm.expect(item).to.have.property('regiao');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Sigla and nome are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(state) {\r",
									"        pm.expect(state.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
									"        pm.expect(state.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Regiao object is present and contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.regiao).to.exist;\r",
									"        pm.expect(item.regiao).to.be.an('object');\r",
									"        pm.expect(item.regiao).to.have.property('id');\r",
									"        pm.expect(item.regiao).to.have.property('sigla');\r",
									"        pm.expect(item.regiao).to.have.property('nome');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/regioes/3/estados",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"regioes",
								"3",
								"estados"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Localidades",
			"item": [
				{
					"name": "ListarTodosDistritos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/distritos",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"distritos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDistritoPorIdentificador",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://servicodados.ibge.gov.br/api/v1/localidades/distritos/160030312",
							"protocol": "https",
							"host": [
								"servicodados",
								"ibge",
								"gov",
								"br"
							],
							"path": [
								"api",
								"v1",
								"localidades",
								"distritos",
								"160030312"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}